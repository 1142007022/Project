package kaisheng.project.service;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.sql.rowset.serial.SerialException;
import javax.tools.Diagnostic;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang3.StringUtils;

import kaisheng.project.Dao.AccountAndDeptDao;
import kaisheng.project.Dao.AccountDao;
import kaisheng.project.entity.Account;
import kaisheng.project.entity.Customer;
import kaisheng.project.exception.ServiceException;
import kaisheng.project.utils.Config;
import kaisheng.project.utils.Page;

public class AccountService {

	AccountAndDeptDao adDao = new AccountAndDeptDao();
	AccountDao dao = new AccountDao();
	String salt = Config.get("user.password.salt");

	public Account findByMobileAndPassword(String mobile, String password) {

		Account acc = dao.findByMobile(mobile);
		String saltpassword = DigestUtils.md5Hex(salt + password);
		if (acc != null && saltpassword.equals(acc.getPassword())) {
			return acc;
		} else {
			return null;
		}
	}

	public void saveAccountDept(String username, String password, String mobile, String[] depIds) {
		Account acc = dao.findByMobile(mobile);
		if (acc != null) {
			throw new ServiceException("员工已存在请勿重复添加!");
		} else {
			acc = new Account();
			acc.setUsername(username);
			password = DigestUtils.md5Hex(salt + password);
			acc.setPassword(password);
			acc.setMobile(mobile);
			acc.setCreateTime(new Timestamp(System.currentTimeMillis()));
			acc.setUpdateTime(new Timestamp(System.currentTimeMillis()));
			dao.save(acc);

			Account account = dao.findByMobile(mobile);
			int aId = account.getId();
			// 保存成功之后在建立account和dept的关系
			for (int i = 0; i < depIds.length; i++) {
				int depId = Integer.parseInt(depIds[i]);
				adDao.save(aId, depId);
			}

		}

	}

	public int getAllNumByDeptId(String deptId,int accId) {
		int adminId = Integer.parseInt(Config.get("adminId"));
		return dao.findAllByDeptId(deptId, accId).size();
	}

	public Page<Account> findByPage(String deptId, int pNum,HttpServletRequest req) {
		
		HttpSession session = req.getSession();
		Account acc = (Account) session.getAttribute("account");
		//System.out.println("id--------"+acc.getId());
		
		int accId = acc.getId();
		int allNum = getAllNumByDeptId(deptId,accId);
		
		Page<Account> page = new Page<>(allNum, pNum);
		List<Account> lists = dao.finByPage(deptId, page.getStart(), page.getPageSize(),accId);

		page.setItems(lists);
		return page;
	}

	/*private int getAllNumByDeptId(String deptId) {
		return dao.getCountByDeptId(deptId);
	}*/

	public List<Account> findAll() {
		return dao.findAll();
	}

	public void changeKey(String newPassword, int id) {
		String password = DigestUtils.md5Hex(salt + newPassword);
		Account acc = dao.findById(id);
		if(acc.getPassword().equals(password)){
			throw new ServiceException("新密码不能和旧密码重复！");
		}
		
		dao.changeKey(password,id);
	}

	public void delById(int accId) {
		dao.delById(accId);
	}

	public Account finEditAccById(int accId) {
		List<Account> accLists = dao.finEditAccById(accId);
		for(int i = 0;i < accLists.size();i++) {
			
			//System.out.println("deptname............"+accLists.get(i).getDeptName());
			accLists.get(0).setDeptName(accLists.get(0).getDeptName() + accLists.get(i).getDeptName() + " ");
		}
		return accLists.get(0);
	}

	public void editAccount(String username, String mobile, int id) {
		dao.editAccount(username,mobile,id);
	}

	public void delAccAnddeptByAccId(String id) {
		dao.delAccAnddeptByAccId(Integer.parseInt(id));
	}

	public void saveAccountAndDept(String id, String depId) {
		int aid = Integer.parseInt(id);
		int pid = Integer.parseInt(depId);
		adDao.save(aid,pid);		
	}





}
